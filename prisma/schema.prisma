// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum CATEGORY {
  FRONTEND
  BACKEND
  OPS
  AFK
}

model Author {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  Course         Course[]
  name           String
  description    String
  photo          String
  link_twitter   String
  link_website   String
  link_mastadoon String
  link_github    String
}

model Course {
  id          String       @id @default(uuid())
  name        String
  slug        String       @unique
  description String
  media       String
  category    CATEGORY
  author      Author       @relation(fields: [authorId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  UserCourse  UserCourse[]
  authorId    String
  language    String
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  password      String?
  emailVerified DateTime?
  resetToken    String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  courses       UserCourse[]
}

model UserCourse {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  course       Course    @relation(fields: [courseId], references: [id])
  courseId     String
  startedDate  DateTime  @default(now())
  progress     Int?      @default(0)
  finishedDate DateTime?
}
